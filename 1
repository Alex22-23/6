from typing import Union

def calculate_average(data: list) -> Union[float, str]:
    """Вычисляет среднее значение элементов списка, обрабатывая различные типы данных.

    Args:
        data: Список, содержащий числа (int, float) или строки, представимые в виде чисел.

    Returns:
        Среднее арифметическое элементов списка, округленное до двух знаков после запятой, 
        или "Bad Request", если список пуст или содержит неконвертируемые элементы.
    """

    if not data:
        return "Bad Request"

    numeric_values = []
    for item in data:
        try:
            numeric_values.append(float(item)) # Пытаемся преобразовать к float сразу
        except (ValueError, TypeError): # Ловим и ValueError и TypeError
            return "Bad Request"

    return round(sum(numeric_values) / len(numeric_values), 2)



# Тесты с использованием assert (и добавлены еще несколько тестов для большей полноты)

assert calculate_average([10, 20, 30, 40, 50]) == 30.0
assert calculate_average([1.5, 2.5, 3.5]) == 2.5
assert calculate_average([1, 2.5, 3]) == 2.17
assert calculate_average(['2', '3', '4']) == 3.0
assert calculate_average(['1', 'a', '3']) == "Bad Request"
assert calculate_average([]) == "Bad Request"
assert calculate_average([1, [2], 3]) == "Bad Request"
assert calculate_average([1, {'a': 1}, 3]) == "Bad Request" # Словарь
assert calculate_average([1, (2,), 3]) == "Bad Request" # Кортеж
assert calculate_average([1, 2.0, 3]) == 2.0 # Проверка на правильное округление float
